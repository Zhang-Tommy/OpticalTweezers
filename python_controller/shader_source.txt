<data>
<shader_source>
const vec4 white = vec4(1,1,1,1);
const float pi = 3.1415;
uniform int n;                     //number of spots
uniform float totalA;         //total of the "intensity" parameters (used for intensity shaping)
uniform vec4 spots[200]; //spot parameters- each spot corresponds to 4 vec4, first one is x,y,z,l, second one is amplitude, -,-,-
                                            //element 0 x  y  z  l    (x,y,z in um and l is an integer)
                                            //element 1 intensity (I) phase -  -
                                            //element 2 na.x na.y na.r -  (the x, y position, and radius, of the spot on the SLM- useful for Shack-Hartmann holograms)
                                            //element 3 line trapping x y z and phase gradient.  xyz define the size and angle of the line, phase gradient (between +/-1) is the
                                            //scattering force component along the line.  Zero is usually a good choice for in-plane line traps
uniform vec2 centre;        //=vec2(0.5,0.5);//centre of the hologram as a fraction of its size (usually 0.5,0.5)
uniform vec2 size;            //=vec2(7000,7000);//size of the hologram in microns
uniform float f;                 //=1600; //focal length in microns
uniform float k;                //=9.36; //wavevector in 1/microns
uniform float blazing[32]; //blazing function
uniform vec4 zernikeCoefficients[3]; //zernike coefficients, matching the modes defined below
uniform vec3 zernx;        //=vec3(0.0,0.0,0.0);
uniform vec3 zerny;        //=vec3(0.0,0.0,0.0);
uniform vec3 zernz;        //=vec3(0.0,0.0,0.0);

vec4 spot(int i, int j){
//  return texture(spots, vec2( (float(j) +0.5) / 4.0, ( float(i) + 0.5) / float(n) ))*500.0 -250.0;
  return spots[4*i +j];
}

void main(void)
{
   float totalr=0.0;                                                //real and imaginary parts of the complex hologram for this pixel
   float totali=0.0;
   float phase;                                                       //phase of current pixel, due to the spot (in loop) or of the resultant hologram (after loop)
   float amplitude;                                               //ditto for amplitude
   vec2 xy=(gl_TexCoord[0].xy-centre)*size;    //current xy position in the hologram, in microns
   float phi=atan(xy.x,xy.y);		                              //angle of the line joining our point to the centre of the pattern
   float length;                                                     //length of a line
   vec4 pos=vec4(xy/f,1.0-dot(xy,xy)/2.0/f/f,phi/k);
   vec4 na;                                                           //to be used later, inside the loop
	 float sx;
//Zernike polynomials
   float x=xy.x/size.x*2.0;
   float  y=xy.y/size.y*2.0; //x,y range from -1 to 1, because the Zernike modes want them to do that...
   float r2=x*x+y*y;
   vec4 zerna=vec4(2.0*x*y,2.0*r2-1.0,x*x-y*y,3.0*x*x*y-y*y*y); //zernike modes (2 -2, 2 0, 2 2, 3 -3)
   vec4 zernb=vec4((3.0*r2-2.0)*y,(3.0*r2-2.0)*x,x*x*x-3.0*x*y*y,4.0*x*y*(x*x-y*y)); //3 -1 through 4 -4
   vec4 zernc=vec4((4.0*r2-3.0)*zerna[0],6.0*r2*r2-6*r2+1,(4.0*r2-3.0)*zerna[2],x*x*x*x-6.0*x*x*y*y+y*y*y*y); //4 -2 through 4 4
//probably want to redefine x,y,r2 if they are used below this line, but the are currently not.

   vec4 varyingzernike=vec4(0.0,0.0,0.0,0.0);
   varyingzernike.x=dot(zernx,zerna.xyz);
   varyingzernike.y=dot(zerny,zerna.xyz);
   varyingzernike.z=dot(zernz,zerna.xyz);

   float j=0.0;                                                       //this loop goes through the spots and calculates the contribution from each one, summing
                                                                            //real and imaginary parts as we go.
   for(int i=0; i<n; i++){
      amplitude=spot(i,1)[0];                             //amplitude of current spot
      phase=k*dot(spot(i,0),pos)+spot(i,1)[1]; 
                                                                            //this is the basic gratings and lenses algorithm; phase=kx*x+ky*y+kz*(x^2+y^2)+l*theta

      na = spot(i,2);                                           //restrict the spot to a region of the back aperture which is na[2] in radius, centred on na.xy
      if(dot(na.xy-xy/size,na.xy-xy/size) > na[2]*na[2]){
        amplitude = 0.0;
      }
//creates an xyz line trap, needs amplitude shaping.
      vec4 line = spot(i,3);
      length=sqrt(dot(line.xyz,line.xyz));
      if(length>0.0){
		      sx=k*dot(vec4(pos.xyz,1.0*length),line);
		      if(sx!=0.0) amplitude*=sin(sx)/sx;
      }
                                                                 //finally, convert from amplitude+phase to real+imaginary for the summation
      totalr += amplitude*sin(phase);	  //the way atan is defined, we need to use sin for r and cos for i.
      totali += amplitude*cos(phase);
   }

   amplitude = sqrt(totalr*totalr+totali*totali);
   phase=atan(totalr,totali);
   if(amplitude==0.0) phase=0.0;
   if(totalA>0.0){ //do amplitude-shaping (dumps light into zero order when not needed)
     phase *= clamp(amplitude/totalA,0.0,1.0);
   }
   phase += dot(zernikeCoefficients[0],zerna) + dot(zernikeCoefficients[1],zernb) + dot(zernikeCoefficients[2],zernc);
   phase = mod(phase + pi, 2*pi) -pi;


// the 3 lines below do blazed black and white output to all 3 colour channels (most SLMs use this)
    //we split phase into two parts: phint is an integer between 0 and 30, alpha is a float between 0 and 0.99999999999999
    //such that (phint + alpha)/31 maps onto 0...1.
    //then we use the blazing array with linear interpolation to apply the LUT.

   int phint = int(floor((phase/2.0/pi +0.5)*30.9999999)); //this needs to be BLAZING_TABLE_LENGTH-(something small)-1
   float alpha = fract((phase/2.0/pi +0.5)*30.9999999);
   gl_FragColor = white * blazing[phint]*(1.0-alpha)+blazing[phint+1]*alpha; //this uses the blazing table with linear interpolation

//  gl_FragColor = spot(0,1);
//  gl_FragColor = vec4(0.5, 0.4, 0.6, 1.0);
// gl_FragColor = gl_FragColor * vec4(0.5, 0.4, 0.6, 1.0);
//  gl_FragColor = texture(spots, gl_TexCoord[0].xy)*500.0-250.0;
}

</shader_source>
</data>


